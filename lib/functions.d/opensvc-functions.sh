__guard_source || return

#:name: generate_opensvc_conf
#:group: opensvc
#:synopsis: Emit an OpenSVC agent config to STDOUT (does NOT write to disk).
#:usage: generate_opensvc_conf [<ips_role>]
#:description:
#  Builds an opensvc.conf from host_config and cluster_config values and prints it.
#  - <ips_role> is optional and only used when TYPE=IPS.
#  - Origin identity is taken from $(hps_origin_tag).
#  Sources ONLY:
#    host_config "<origin>" get <KEY>  (except for IPS nodes, which are static for now)
#    cluster_config get <KEY>
generate_opensvc_conf() {
  local ips_role="${1:-}"

  local origin
  origin="$(hps_origin_tag)"

  # --- Host-scoped ---
  local osvc_nodename osvc_type osvc_tags

  osvc_type="$(host_config "$origin" get TYPE 2>/dev/null || true)"

  if [[ "${osvc_type^^}" == "IPS" ]]; then
    # IPS nodes are not stored in host_config the same way as others.
    # For now, we set type and nodename statically:
    #   - type = IPS
    #   - nodename = ips
    # Later this could be replaced by a function (e.g. get_ips_nodename).
    osvc_type="IPS"
    osvc_nodename="ips"
  else
    osvc_nodename="$(host_config "$origin" get HOSTNAME 2>/dev/null || true)"
    if [[ -z "$osvc_nodename" ]]; then
      osvc_nodename="$(hostname -s 2>/dev/null || echo "node-${origin}")"
    fi
  fi

  # IPS role precedence: CLI > host_config > cluster_config > default
  [[ -z "$ips_role" ]] && ips_role="$(host_config "$origin" get IPS_ROLE 2>/dev/null || true)"
  [[ -z "$ips_role" ]] && ips_role="$(cluster_config get OSVC_IPS_ROLE 2>/dev/null || true)"
  [[ -z "$ips_role" ]] && ips_role="provisioning"

  # TYPE → tags (normalize to lowercase words)
  case "${osvc_type^^}" in
    IPS) osvc_tags="ips ${ips_role,,}" ;;
    SCH) osvc_tags="storage zfs" ;;
    TCH|CCH) osvc_tags="compute" ;;
    "")  osvc_tags="" ;;
    *)   osvc_tags="$(echo "$osvc_type" | tr '[:upper:]' '[:lower:]')" ;;
  esac

  # --- Cluster-scoped ---
  local osvc_log_level osvc_listener_port osvc_web_ui osvc_web_port osvc_hb_interval osvc_hb_timeout
  local osvc_templates_url osvc_packages_url
  osvc_log_level="$(cluster_config get OSVC_LOG_LEVEL 2>/dev/null || echo info)"
  osvc_listener_port="$(cluster_config get OSVC_LISTENER_PORT 2>/dev/null || echo 7024)"
  osvc_web_ui="$(cluster_config get OSVC_WEB_UI 2>/dev/null || echo yes)"
  osvc_web_port="$(cluster_config get OSVC_WEB_PORT 2>/dev/null || echo 7023)"
  osvc_hb_interval="$(cluster_config get OSVC_HB_INTERVAL 2>/dev/null || echo 5)"
  osvc_hb_timeout="$(cluster_config get OSVC_HB_TIMEOUT 2>/dev/null || echo 15)"
  osvc_templates_url="$(cluster_config get OSVC_TEMPLATES_URL 2>/dev/null || echo)"
  osvc_packages_url="$(cluster_config get OSVC_PACKAGES_URL 2>/dev/null || echo)"

  # --- Static paths ---
  local conf_dir="/etc/opensvc"
  local var_dir="/var/lib/opensvc"
  local log_file="/var/log/opensvc/agent.log"
  local auth_key_file="/etc/opensvc/agent.key"

  cat <<EOF
# OpenSVC Agent Node Configuration (generated by HPS)

[agent]
nodename = ${osvc_nodename}
tags = ${osvc_tags}
conf_dir = ${conf_dir}
var_dir = ${var_dir}
log_file = ${log_file}
log_level = ${osvc_log_level}
listener_port = ${osvc_listener_port}
web_ui = ${osvc_web_ui}
web_ui_port = ${osvc_web_port}
hb_interval = ${osvc_hb_interval}
hb_timeout  = ${osvc_hb_timeout}
auth_key_file = ${auth_key_file}

[repo]
templates_url = ${osvc_templates_url}
packages_url  = ${osvc_packages_url}

[stats]
enable = yes
push_interval = 60
EOF

install_opensvc_foreground_wrapper

}


#:name: install_opensvc_foreground_wrapper
#:group: opensvc
#:synopsis: Install /usr/local/sbin/opensvc-foreground to run the OpenSVC v3 daemon under supervisor cleanly.
#:usage: install_opensvc_foreground_wrapper
#:description:
#  Writes an exec wrapper that:
#    - ensures runtime dirs (/run/opensvc, /var/log/opensvc, /var/lib/opensvc) exist
#    - verifies /etc/opensvc/agent.key is present and non-empty
#    - runs 'om daemon run' in the foreground (v3) for supervisor control
#    - funnels stdout/err to ${HPS_LOG_DIR}/opensvc.{out,err}.log
#    - filters the noisy "zerolog … journal/socket" lines from stderr (no journald in container)
#  Return codes:
#    0 on success; non-zero if preflight fails or exec can't be launched.
install_opensvc_foreground_wrapper() {
  local target="/usr/local/sbin/opensvc-foreground"
  local logdir="${HPS_LOG_DIR:-/srv/logs}"

  mkdir -p "$(dirname "$target")" "$logdir"

  cat >"$target" <<'EOF'
#!/usr/bin/env bash
set -euo pipefail

# Respect HPS log dir if exported, fallback if not.
LOGDIR="${HPS_LOG_DIR:-/srv/logs}"

export HOME="/root"

# Preflight: required directories
mkdir -p /run/opensvc /var/log/opensvc /var/lib/opensvc "$LOGDIR"

# Preflight: agent key must exist and be non-empty
if [[ ! -s /etc/opensvc/agent.key ]]; then
  echo "[opensvc] FATAL: /etc/opensvc/agent.key missing or empty" >&2
  exit 2
fi

# Run v3 daemon in foreground for supervisor; filter journald spam on stderr.
# Keep stdout/stderr in HPS logs in addition to agent.log controlled by opensvc.conf.
exec /usr/bin/om daemon run \
  1>>"${LOGDIR}/opensvc.out.log" \
  2> >(stdbuf -o0 awk '!/zerolog: could not write event: write unixgram .*journal\/socket/' >> "${LOGDIR}/opensvc.err.log")
EOF

  chmod 0755 "$target"
  hps_log info "[opensvc] Installed wrapper: ${target}"
}







