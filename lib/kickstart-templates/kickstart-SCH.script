

# ------------ Locale

lang en_GB.UTF-8
keyboard uk
timezone UTC --utc

# ------------ Network

network --bootproto=static --ip=@HOST_IP@ --netmask=@HOST_NETMASK@ --gateway=@HOST_GATEWAY@ --nameserver=@HOST_DNS@ --hostname=@HOST_NAME@ --activate
firewall --disabled

# ------------ Authentication

rootpw --plaintext changeme
#authconfig --enableshadow --passalgo=sha512

# ------------ Hardening

selinux --enforcing

## TODO: Disable this
services --enabled=sshd


# ------------ Disk / boot

zerombr
clearpart --all --initlabel

part / --fstype=xfs --size=10240
part /var --fstype=xfs --size=10240

bootloader --location=mbr

# If you prefer manual partitioning, uncomment below and comment 'autopart' above:
# clearpart --all --initlabel
# part biosboot --fstype=biosboot --size=1
# part /boot --fstype=xfs --size=512
# part swap --size=2048
# part / --fstype=xfs --grow --size=1024
#part / --fstype=ext4 --size=10240

# Disk / boot - autopartition
#zerombr
#clearpart --all --initlabel
#autopart --nohome --nolvm
#bootloader --location=mbr

# ------------ Reboot when done
reboot


# ------------ pre

%pre --interpreter /bin/bash

# load remote functions
curl -fsSL "http://${HOST_GATEWAY}/cgi-bin/boot_manager.sh?cmd=bootstrap_initialise_distro"  | bash

load_remote_host_config
remote_log "Entering PRE stage"
remote_log "lsblk: $(lsblk -n $DISK)"
remote_log "Completed disk detection, found disk $DISK"

# If no usable disk was found
if [ -z "$DISK" ]; then
    echo "No suitable empty disk found!" > /dev/ttyS0
    remote_log "No usable disk found, rebooting"
    reboot
fi

remote_log "Usability check for $DISK passed"

# Convert size to MiB
DISK_SIZE_MIB=$((SIZE / 1024 / 1024))
ROOT_SIZE=15000
VAR_SIZE=15000
ZFS_START_MIB=$((ROOT_SIZE + VAR_SIZE))
ZFS_SIZE_MIB=$((DISK_SIZE_MIB - ZFS_START_MIB))

remote_log "Disk size: $DISK_SIZE_MIB"

# Store info for use later
echo "$DISK" > /tmp/target-disk
echo "$ZFS_START_MIB" > /tmp/zfs_start

remote_log "Starting dynamic partitioning"


# if PROFILE = STORAGESINGLE, elsif STORAGERAID else

# Generate dynamic partition layout
cat <<EOF > /tmp/part-include.ks
ignoredisk --only-use=$DISK
clearpart --all --initlabel --drives=$DISK
bootloader --location=mbr --boot-drive=$DISK
part biosboot --fstype=biosboot --size=1 --ondisk=$DISK
part /     --fstype=xfs --size=$ROOT_SIZE   --ondisk=$DISK
part /var  --fstype=xfs --size=$VAR_SIZE    --ondisk=$DISK
# Calculate optimal swap, should be 20-30G assuming space
part swap --size=5000 --ondisk=$DISK
EOF

remote_log "$(cat /tmp/part-include.ks)"

remote_log "Pre section ended"
%end


# ----------- Add the local repo 

repo --name=baseos --baseurl=http://@HOST_GATEWAY@/distros/x86_64-linux-rockylinux-10.0/BaseOS/ --install --noverifyssl
#repo --name=minimal --baseurl=http://@HOST_GATEWAY@/distros/x86_64-linux-rockylinux-10.0/Minimal/ --install --noverifyssl
repo --name=appstream --baseurl=http://@HOST_GATEWAY@/distros/x86_64-linux-rockylinux-10.0/AppStream/ --install

# Install packages not available in the official repo
repo --name=hps-packages --baseurl=http://@HOST_GATEWAY@/packages/x86_64-linux-rockylinux-10.0/Repo/ --install


%include /tmp/part-include.ks

#  ------------ Packages

%packages
@^minimal-environment
@core
# Core services
openssh-server

# Build packages - hope to not need them with prebuilt zfs
kernel-devel
targetcli
python3-rtslib
python3-configshell
gcc 
make
#dkms
autoconf
automake
libtool
rpm-build
libblkid-devel
libuuid-devel
libudev-devel
openssl-devel
zlib-devel
libaio-devel
libattr-devel
elfutils-libelf-devel
python
python-setuptools
python-cffi
libffi-devel
rsync

#opensvc-server
#zfs-release
#ncompress
%end



#  ------------ Post chroot (installed system environment)

%post --nochroot --log=/root/ks-post.log 

# load remote functions
curl -fsSL "http://${HOST_GATEWAY}/cgi-bin/boot_manager.sh?cmd=bootstrap_initialise_distro"  | bash
## the below functions can be deleted when verified that they are loaded from above

remote_log "Entering POST stage"

chroot /mnt/sysimage /bin/bash <<EOF

# load remote functions
curl -fsSL "http://${HOST_GATEWAY}/cgi-bin/boot_manager.sh?cmd=bootstrap_initialise_distro"  | bash
## the below functions can be deleted when verified that they are loaded from above

remote_log "Inside post chroot"

#remote_log "[+] Building ZFS via DKMS..."
#dkms autoinstall
#modprobe zfs
#dnf install -y epel-release
#dnf install -y https://zfsonlinux.org/epel/zfs-release.el9_$(uname -r).noarch.rpm
#dnf install -y kernel-devel zfs targetcli python3-rtslib python3-configshell

# Enable services
systemctl enable target
systemctl enable libvirtd
systemctl start libvirtd

echo "Hardening install..."
sed -i 's/^PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config
systemctl enable sshd
#passwd -l root
#systemctl disable firewalld NetworkManager
#systemctl mask firewalld NetworkManager
nmcli connection modify "Wired connection 1" connection.autoconnect yes

#echo "Hardening install..."
#sed -i 's/^PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config
#passwd -l root
#systemctl enable sshd
##systemctl disable firewalld NetworkManager
##systemctl mask firewalld NetworkManager
#nmcli connection modify "Wired connection 1" connection.autoconnect yes
#curl -X POST "http://@HOST_GATEWAY@/cgi-bin/boot_manager.sh?mac=@macid@&cmd=set_status&status=INSTALLED"

# create the zpools
zpool_create_on_free_disk

remote_log "Exiting post chroot"
EOF


curl -X POST "http://@HOST_GATEWAY@/cgi-bin/boot_manager.sh?mac=@macid@&cmd=set_status&status=INSTALLED"
remote_log "Install completed, status updated"

%end

