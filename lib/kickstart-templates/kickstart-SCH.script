#version=RHEL10
text

# ------------ Locale
lang en_GB.UTF-8
keyboard uk
timezone --utc UTC

# ------------ Network
network --bootproto=dhcp --device=link --onboot=yes --activate
firewall --disabled

# ------------ Authentication
rootpw --plaintext changeme
selinux --permissive

# ------------ Services
services --enabled=sshd

# ------------ Disk / boot
zerombr
clearpart --all --initlabel
part biosboot --fstype=biosboot --size=1
part /boot --fstype=xfs --size=512
part / --fstype=xfs --size=3072
part swap --size=512


# ------------ Repositories
url --url=http://ips/distros/rocky-10
repo --name=baseos --baseurl=http://ips/distros/rocky-10/BaseOS/
repo --name=appstream --baseurl=http://ips/distros/rocky-10/AppStream/



%pre --interpreter /bin/bash --log=/tmp/ks-pre.log


# load remote functions
echo "loading functions from IPS"
curl -fsSL "http://10.99.1.1/cgi-bin/boot_manager.sh?cmd=node_get_bootstrap_functions" >/tmp/remote_functions.sh
source /tmp/remote_functions.sh
hps_load_node_functions

n_remote_log "*************** Entering PRE stage *******************"


n_remote_log "Entering PRE stage"
n_remote_log "lsblk: $(lsblk -n $DISK)"
n_remote_log "Completed disk detection, found disk $DISK"

## If no usable disk was found
#if [ -z "$DISK" ]; then
#    echo "No suitable empty disk found!" > /dev/ttyS0
#    n_remote_log "No usable disk found, rebooting"
#    reboot
#fi

n_remote_log "Usability check for $DISK passed"

# Convert size to MiB
DISK_SIZE_MIB=$((SIZE / 1024 / 1024))
ROOT_SIZE=15000
VAR_SIZE=15000
ZFS_START_MIB=$((ROOT_SIZE + VAR_SIZE))
ZFS_SIZE_MIB=$((DISK_SIZE_MIB - ZFS_START_MIB))

n_remote_log "Disk size: $DISK_SIZE_MIB"

# Store info for use later
echo "$DISK" > /tmp/target-disk
echo "$ZFS_START_MIB" > /tmp/zfs_start

n_remote_log "Starting dynamic partitioning"


# if PROFILE = STORAGESINGLE, elsif STORAGERAID else

# Generate dynamic partition layout
cat <<EOF > /tmp/part-include.ks
ignoredisk --only-use=$DISK
clearpart --all --initlabel --drives=$DISK
bootloader --location=mbr --boot-drive=$DISK
part biosboot --fstype=biosboot --size=1 --ondisk=$DISK
part /     --fstype=xfs --size=$ROOT_SIZE   --ondisk=$DISK
part /var  --fstype=xfs --size=$VAR_SIZE    --ondisk=$DISK
# Calculate optimal swap, should be 20-30G assuming space
part swap --size=5000 --ondisk=$DISK
EOF

n_remote_log "$(cat /tmp/part-include.ks)"

n_remote_log "Pre section ended"


exit 0

%end



# ------------ Packages
%packages
@^minimal-environment
@core
openssh-server
# Storage packages
targetcli
python3-rtslib
python3-configshell
# Build tools for ZFS
kernel-devel
gcc
make
autoconf
automake
libtool
rpm-build
libblkid-devel
libuuid-devel
libudev-devel
openssl-devel
zlib-devel
libaio-devel
libattr-devel
elfutils-libelf-devel
python3
python3-setuptools
python3-cffi
libffi-devel
rsync
%end





#  ------------ Post chroot (installed system environment)

%post --nochroot --log=/root/ks-post.log 



# load remote functions
curl -fsSL "http://10.99.1.1/cgi-bin/boot_manager.sh?cmd=node_get_bootstrap_functions"  | bash

## the below functions can be deleted when verified that they are loaded from above

n_remote_log "Entering POST stage"

chroot /mnt/sysimage /bin/bash <<EOF

# Now in mounted sysimage
curl -fsSL "http://10.99.1.1/cgi-bin/boot_manager.sh?cmd=node_get_bootstrap_functions"  | bash

## the below functions can be deleted when verified that they are loaded from above

n_remote_log "Inside post chroot"

#n_remote_log "[+] Building ZFS via DKMS..."
#dkms autoinstall
#modprobe zfs
#dnf install -y epel-release
#dnf install -y https://zfsonlinux.org/epel/zfs-release.el9_$(uname -r).noarch.rpm
#dnf install -y kernel-devel zfs targetcli python3-rtslib python3-configshell

# Enable services

systemctl enable target
systemctl enable libvirtd
systemctl start libvirtd

echo "Hardening install..."
sed -i 's/^PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config

#TODO: Disable
systemctl enable sshd

#passwd -l root
#systemctl disable firewalld NetworkManager
#systemctl mask firewalld NetworkManager

nmcli connection modify "Wired connection 1" connection.autoconnect yes

#echo "Hardening install..."
#sed -i 's/^PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config
#passwd -l root
#systemctl enable sshd
##systemctl disable firewalld NetworkManager
##systemctl mask firewalld NetworkManager
#nmcli connection modify "Wired connection 1" connection.autoconnect yes
#curl -X POST "http://@HOST_GATEWAY@/cgi-bin/boot_manager.sh?mac=@macid@&cmd=set_status&status=INSTALLED"

# create the zpools
zpool_create_on_free_disk

n_remote_log "Exiting post chroot"
EOF

sed -i 's/^SELINUX=.*/SELINUX=enforcing/' /etc/selinux/config

curl -X POST "http://10.99.1.1/cgi-bin/boot_manager.sh?mac=@macid@&cmd=set_status&status=INSTALLED"

n_remote_log "Install completed, status updated"

# Log completion
echo "Installation completed at $(date)" >> /root/install.log

exit 0

%end


# ------------ Reboot when done
reboot



